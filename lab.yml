# ==========================================
# Course: Software Defined Networking
# Module: Introduction to APIs
# Purpose: Hands on activity for working with APIs using cURL and Postman
# Filename: lab.yml
# Author: Sheldon Swanson
# Version: 1.0
# Created: 10/2025
# Updated: 10/2025
# Notes: Parsers ignore these comments.
# ==========================================
title: "Lab 3 — Introduction to APIs"
course: "Software Defined Networking"
module: "Network Automation Fundamentals"
lab_number: 3
time_estimate: "1.5–2 hours"

#====================================================
#   ____  _____    _    ____  __  __ _____
#  |  _ \| ____|  / \  |  _ \|  \/  | ____|
#  | |_) |  _|   / _ \ | | | | |\/| |  _|
#  |  _ <| |___ / ___ \| |_| | |  | | |___
#  |_| \_\_____/_/   \_\____/|_|  |_|_____|
#====================================================

repo_tree:
  enabled: true
  max_depth: 3
  ignore:
    - ".git"
    - ".github"
    - "_template"
    - "_render"
    - "__pycache__"
    - ".venv"
    - "venv"
    - "node_modules"
    - ".vscode"
    - ".idea"
    - "*.pyc"
    - "logs"
    - "screens"

readme_topics:
  - title: "Getting Started with cURL"
    content: > 
      cURL is a command-line tool for making HTTP requests. It supports various protocols and is 
      widely used for testing APIs. cURL commands typically include the URL, method, headers, and data.
      You can install cURL on most systems via package managers like `apt`, `brew`, or `choco`. To check 
      if cURL is installed, run `curl --version` in your terminal.

    code_block:
      language: "bash"
      code: |
        curl --version

  - title: "cURL Basics"
    content: > 
      The basic syntax for a cURL command is:
      ```
      curl [options] <URL>
      ```
      Common options include:
      - `-X <METHOD>`: Specify the HTTP method (GET, POST, etc.).
      - `-H "<HEADER>"`: Add a header to the request.
      - `-d "<DATA>"`: Include data in the request body (for POST/PUT).
      - `-o <FILE>`: Save the response to a file.
      - `-v`: Enable verbose output to see request/response details.

      You can combine these options to customize your requests. For example, to make a GET request with a custom header:
      `curl -H "Authorization: Bearer <token>" https://api.example.com/data`. This command includes an authorization header 
      with a bearer token which we can use to authentcate to our API. We can also request JSON data by adding an `Accept` header
      to our request as shown below:

    code_block:
      language: "bash"
      code: |
        curl -H "Authorization: Bearer <token>" -H "Accept: application/json" https://api.example.com/data
    
  - title: "Understanding HTTP Methods"
    content: >
      HTTP methods define the action to be performed on a resource. The most common methods are:
      - `GET`: Retrieve data from a server.
      - `POST`: Send data to a server to create a resource.
      - `PUT`: Update an existing resource on the server.
      - `DELETE`: Remove a resource from the server.

      Each method has specific semantics and is used in different scenarios. For example, use `GET` for fetching data, 
      and `POST` for submitting forms or uploading files. This is known as a CRUD operation (Create, Read, Update, Delete).
      While not every api supports all methods, most will support at least GET and POST.

  - title: "Disecting HTTP Response Codes"
    content: >
      HTTP response codes indicate the result of an HTTP request. They are grouped into five categories:
      - `1xx`: Informational responses (e.g., 100 Continue)
      - `2xx`: Successful responses (e.g., 200 OK, 201 Created)
      - `3xx`: Redirection messages (e.g., 301 Moved Permanently, 302 Found)
      - `4xx`: Client error responses (e.g., 400 Bad Request, 401 Unauthorized, 404 Not Found)
      - `5xx`: Server error responses (e.g., 500 Internal Server Error, 503 Service Unavailable)

      Understanding these codes helps diagnose issues with API requests. For example, a `401 Unauthorized` indicates 
      that authentication is required or has failed, while a `404 Not Found` means the requested resource does not exist. A 200
      status code indicates that the request was successful and the server returned the requested data.

  - title: "JSON Responses"
    content: >
      JSON (JavaScript Object Notation) is a lightweight data interchange format that is easy for humans to read and write, 
      and easy for machines to parse and generate. Many APIs use JSON to format their responses because it is language-independent 
      and widely supported.

      You can use tools like `jq` to parse and pretty-print JSON responses in the terminal. For example, to extract the `name` field 
      from a JSON response, you can use the example command below:
      
    code_block:
      language: "bash"
      code: |
        curl -H "Accept: application/json" https://api.example.com/data | jq '.name'
    
    code_notes: >
      In this command, we pipe the output of the cURL request to `jq`, which extracts and displays the value of the `name` field.

  - title: "Postman Overview"
    content: >
      Postman is a popular API client that provides a user-friendly interface for building, testing, and documenting APIs. It allows you 
      to create and save requests, organize them into collections, and share them with others. Postman supports various authentication methods, including API keys, OAuth, and bearer tokens.
      You can also use Postman to generate code snippets in multiple programming languages, making it easier to integrate API calls into your applications.
      Postman is available as a desktop application and a web app. You can download it from the [Postman website](https://www.postman.com/) or use it directly in your browser.

  - title: "Postman Features"
    content: >
      Key features of Postman include:
      - **Collections**: Organize requests into collections for better management.
      - **Environments**: Use environments to store variables like API keys and URLs for different setups (development, staging, production).
      - **Pre-request Scripts**: Write JavaScript code to execute before a request is sent, useful for setting dynamic variables.
      - **Tests**: Write tests to validate responses and automate testing workflows.
      - **Mock Servers**: Create mock servers to simulate API responses for testing purposes.

      Postman also provides collaboration features, allowing teams to work together on API development and testing.

  - title: "Working with Publi APIs"
    content: >
      Public APIs are APIs that are available for use by anyone. They often require an API key or token for authentication, but some may be open and free to use without any credentials.
      When working with public APIs, it is important to read the documentation to understand the available endpoints, request parameters, and response formats.
      Many public APIs have rate limits to prevent abuse, so be mindful of how many requests you make in a given time period.

      Examples of popular public APIs include the [Dad Jokes API](https://icanhazdadjoke.com/api) for fetching random dad jokes and the [Deck of Cards API](https://deckofcardsapi.com/) for simulating a deck of playing cards.

      The Dad Jokes API requires the `Accept: application/json` header to return JSON responses, while the Deck of Cards API allows you 
      to create a new deck and draw cards using the same `deck_id`. Use the `deck_id` from the create response to draw cards in subsequent requests.

  - title: "Authentication Methods"
    content: >
      Authentication is the process of verifying the identity of a user or application before granting access to an API. Common authentication methods include:
      - **API Keys**: A simple token that is included in the request header or URL to identify the client.
      - **Bearer Tokens**: A type of token that is included in the `Authorization` header as `Bearer <token>`. It is often used with OAuth 2.0.
      - **OAuth**: A more complex authentication framework that allows users to grant third-party applications access to their resources without sharing credentials.

      When making authenticated requests, ensure that you include the necessary headers and tokens as specified in the API documentation. If authentication fails, you may receive a `401 Unauthorized` response.
      For this module our APIs do not require any authentication, but moving on to Cisco DevNet APIs and other enterprise APIs you will need to authenticate.

#=========================================================================
#
#   ___ _   _ ____ _____ ____  _   _  ____ _____ ___ ___  _   _ ____
#  |_ _| \ | / ___|_   _|  _ \| | | |/ ___|_   _|_ _/ _ \| \ | / ___|
#   | ||  \| \___ \ | | | |_) | | | | |     | |  | | | | |  \| \___ \
#   | || |\  |___) || | |  _ <| |_| | |___  | |  | | |_| | |\  |___) |
#  |___|_| \_|____/ |_| |_| \_\\___/ \____| |_| |___\___/|_| \_|____/
#
#=========================================================================

objectives:
  - "Define what an API is and why HTTP APIs matter for modern software and networking."
  - "Identify URL, method, headers, body, and status code in HTTP requests/responses."
  - "Use cURL to make GET requests (plain + JSON), enable verbose output, and redirect to files."
  - "Pretty-print and summarize JSON responses for human-readable artifacts."
  - "Use Postman to build requests, save a collection, and compare cURL vs Postman."
  - "Explain API authentication and demonstrate 401 vs 200 with a bearer token example."

python_version: "3.11"
accounts: ["GitHub"]
devices: ["Public APIs (Dad Jokes, Deck of Cards)"]

deliverables:
  readme_summary: "Consistent README with objectives, deliverables, grading, troubleshooting."
  instructions_summary: "Stepwise instructions using cURL and Postman; logs + artifacts present."

grading:
  total_points: 75
  rows:
    - { step: "Tooling", requirement: "`curl` installed & verified (TOOL_OK: curl in log)", points: 5 }
    - { step: "Dad Jokes (plain)", requirement: "Saved to `data/raw/dadjoke_plain.txt`", points: 5 }
    - { step: "Dad Jokes (JSON)", requirement: "Saved to `data/raw/dadjoke_json.txt` with Accept header", points: 5 }
    - { step: "Verbose", requirement: "Saved to `data/raw/dadjoke_verbose.txt` showing status + headers", points: 5 }
    - { step: "Pretty-print", requirement: "Saved to `data/reports/dadjoke_pretty.json`", points: 4 }
    - { step: "Deck create", requirement: "`data/raw/deck_newdeck.json` includes `deck_id`", points: 8 }
    - { step: "Deck draw", requirement: "`data/raw/deck_draw.json` uses same `deck_id`", points: 8 }
    - { step: "Deck summary", requirement: "`data/reports/deck_summary.txt` (value + suit)", points: 5 }
    - { step: "Logs", requirement: "`logs/curl_activity.log` includes LAB3_START/LAB3_END, REQUEST_OK lines, SHA256, and 401 + 200 auth demo", points: 10 }
    - { step: "Postman collection", requirement: "`postman/API_Lab_Collection.json` with required requests", points: 10 }
    - { step: "Screenshots", requirement: "`screens/*` (3 screenshots) show correct requests & responses", points: 10 }

tips:
  - title: "cURL not found"
    symptom: "`curl: command not found`"
    fix: "Install cURL (`sudo apt install curl`) or use the dev container."
  - title: "HTML instead of JSON"
    symptom: "Dad Jokes request prints HTML"
    fix: "Add header `-H 'Accept: application/json'`."
  - title: "No status code/headers"
    symptom: "Output lacks status or headers"
    fix: "Use `-v` for verbose output or `-i` for headers."
  - title: "401 Unauthorized"
    symptom: "Auth demo returns 401"
    fix: "Add `Authorization: Bearer <token>` or use Postman’s Authorization tab."
  - title: "deck_id not found"
    symptom: "Draw step fails"
    fix: "Create a new deck first; copy `deck_id` or store it as a variable."
  - title: "Unreadable JSON"
    symptom: "One-line JSON"
    fix: "Pipe through `jq` or format in VS Code."

autograder:
  log_path: "logs/curl_activity.log"
  required_markers:
    - "LAB3_START"
    - "[STEP 2] Dev Container Started"
    - "TOOL_OK: curl"
    - "TOOL_OK: jq"
    - "REQUEST_OK: dadjoke_plain"
    - "REQUEST_OK: dadjoke_json"
    - "REQUEST_OK: dadjoke_verbose"
    - "REQUEST_OK: deck_create"
    - "REQUEST_OK: deck_draw"
    - "STATUS_CODE: 200"
    - "STATUS_CODE: 401"
    - "AUTH_401"
    - "AUTH_200"
    - "SHA256"
    - "PRETTY_OK: data/reports/dadjoke_pretty.json"
    - "SUMMARY_OK: data/reports/deck_summary.txt"
    - "LAB3_END"

license: "© 2025 Your Name — Classroom use."

overview: >
  Learn API fundamentals using cURL and Postman. Practice plain vs JSON responses, verbose
  headers/status inspection, multi-step workflows with Deck of Cards, and a simple auth demo.
  Produce clean artifacts (raw outputs, pretty JSON, summaries, screenshots) and a Postman
  collection—skills you’ll reuse with Python `requests` in later labs.

before_you_begin: >
  Ensure the dev container opens and network access works (DNS + HTTPS). Confirm `curl` and `jq`
  versions; install `jq` if needed. Sign into Postman (desktop or web).

resources:
  - { title: "Dad Jokes API", url: "https://icanhazdadjoke.com/api", note: "Use Accept: application/json for JSON output." }
  - { title: "Deck of Cards API", url: "https://deckofcardsapi.com/", note: "Create deck, then draw using the same deck_id." }
  - { title: "curl docs", url: "https://curl.se/docs/manpage.html", note: "Flags: -v (verbose), -i (headers), -H (header), -o (output)." }
  - { title: "HTTP status codes", url: "https://developer.mozilla.org/en-US/docs/Web/HTTP/Status" }
  - { title: "jq", url: "https://stedolan.github.io/jq/" }
  - { title: "Postman", url: "https://www.postman.com/" }

faq:
  - q: "Do I need a real token for the auth demo?"
    a: "No. Use a safe demo endpoint or a placeholder token to show 401 vs 200 behavior."
  - q: "Where do outputs go?"
    a: "Raw under `data/raw/`, pretty JSON and summaries under `data/reports/`, logs under `logs/`, screenshots under `screens/`."
  - q: "How do I keep `deck_id` consistent?"
    a: "Save the first response and copy the `deck_id` manually, or use a Postman variable."

submission_checklist:
  - "data/raw/dadjoke_plain.txt present"
  - "data/raw/dadjoke_json.txt present"
  - "data/raw/dadjoke_verbose.txt present"
  - "data/raw/deck_newdeck.json contains deck_id"
  - "data/raw/deck_draw.json present and matches deck_id"
  - "data/reports/dadjoke_pretty.json present"
  - "data/reports/deck_summary.txt present (value + suit)"
  - "logs/curl_activity.log includes LAB3_START/LAB3_END, REQUEST_OK, SHA256, 401 + 200"
  - "postman/API_Lab_Collection.json exported"
  - "screens/postman_dadjoke.png, screens/postman_deckdraw.png, screens/postman_auth.png present"

steps:
  - title: "Clone the Repository"
    goal: "Get your Classroom repo locally."
    actions: "Clone and `cd` into the repo."
    done_when: "You’re in the repo folder and `git status` is clean."
    log_marker: "LAB3_START"

  - title: "Open a Dev Container"
    goal: "Use the standardized environment."
    actions: "Reopen in container; wait for install to complete."
    done_when: "Dev container status shows READY; tools run."
    log_marker: "[STEP 2] Dev Container Started"

  - title: "Install & Verify Tools"
    goal: "Ensure `curl` and `jq` run; Postman installed."
    actions: "Check versions; install `jq` if missing; sign into Postman."
    done_when: "Log shows TOOL_OK: curl and TOOL_OK: jq."
    log_marker: "TOOL_OK"

  - title: "Warm-up: What is an HTTP API?"
    goal: "Identify URL/method/headers/body/status."
    actions: "Pick any public API and write down the parts (theory only)."
    done_when: "You can name all five parts."
    log_marker: "THEORY_OK"

  - title: "cURL #1 — Dad Jokes (plain)"
    goal: "Make a simple GET."
    actions: "Call Dad Jokes with no headers; save to `data/raw/dadjoke_plain.txt`."
    done_when: "File exists and is non-empty."
    log_marker: "REQUEST_OK: dadjoke_plain"

  - title: "cURL #2 — JSON"
    goal: "Request JSON with Accept header."
    actions: "Add `-H 'Accept: application/json'`; save to `data/raw/dadjoke_json.txt`."
    done_when: "File exists and contains JSON."
    log_marker: "REQUEST_OK: dadjoke_json"

  - title: "cURL #3 — Verbose"
    goal: "Inspect status code + headers."
    actions: "Repeat JSON request with `-v`; save to `data/raw/dadjoke_verbose.txt`."
    done_when: "File shows headers and a status (expect 200)."
    log_marker: "REQUEST_OK: dadjoke_verbose"

  - title: "cURL #4 — Pretty-print JSON"
    goal: "Make JSON human-readable."
    actions: "Pretty-print the JSON to `data/reports/dadjoke_pretty.json` (e.g., `jq`)."
    done_when: "Pretty file exists; log `PRETTY_OK`."
    log_marker: "PRETTY_OK: data/reports/dadjoke_pretty.json"

  - title: "cURL #5 — Key fields"
    goal: "Extract a meaningful field."
    actions: "Record `id` or `joke` in the log under `KEY_FIELDS`; include a SHA256 for one artifact."
    done_when: "Log shows `KEY_FIELDS` and `SHA256` lines."
    log_marker: "SHA256"

  - title: "cURL #6 — Deck of Cards (create + draw)"
    goal: "Demonstrate multi-step workflow."
    actions: "Create deck → save `data/raw/deck_newdeck.json` → extract `deck_id` → draw cards → save `data/raw/deck_draw.json` → summarize to `data/reports/deck_summary.txt`."
    done_when: "Both JSON files exist; summary has value + suit."
    log_marker: "REQUEST_OK: deck_create, REQUEST_OK: deck_draw"

  - title: "Postman intro"
    goal: "Recreate cURL requests in a GUI."
    actions: "Make a collection with Dad Jokes, Deck Create, Deck Draw; use a variable for `deck_id`."
    done_when: "Collection exported to `postman/API_Lab_Collection.json`."
    log_marker: "POSTMAN_OK"

  - title: "Postman ↔︎ cURL parity"
    goal: "See equivalence of tools."
    actions: "Export a request as cURL; compare flags/headers."
    done_when: "You can explain the mapping."
    log_marker: "PARITY_OK"

  - title: "Authentication demo"
    goal: "Show 401 vs 200 with headers."
    actions: "Call a safe demo endpoint without auth (expect 401) → add `Authorization: Bearer <token>` (expect 200)."
    done_when: "Log shows `AUTH_401` and `AUTH_200` plus status lines."
    log_marker: "AUTH_401, AUTH_200"

  - title: "Wrap-up & Submit"
    goal: "Ensure artifacts + logs match checklist."
    actions: "Verify deliverables and screenshots; push branch and open PR."
    done_when: "Repo contains all required files; Actions run is green."
    log_marker: "LAB3_END"

