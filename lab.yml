# ==========================================
# Course: Software Defined Networking
# Module: Introduction to APIs
# Purpose: Hands on activity for working with APIs using cURL and Postman
# Filename: lab.yml
# Author: Sheldon Swanson
# Version: 1.0
# Created: 10/2025
# Updated: 10/2025
# Notes: Parsers ignore these comments.
# ==========================================
title: "Lab 3 — Introduction to APIs"
course: "Software Defined Networking"
module: "Network Automation Fundamentals"
lab_number: 3
time_estimate: "1.5–2 hours"

#====================================================
#   ____  _____    _    ____  __  __ _____
#  |  _ \| ____|  / \  |  _ \|  \/  | ____|
#  | |_) |  _|   / _ \ | | | | |\/| |  _|
#  |  _ <| |___ / ___ \| |_| | |  | | |___
#  |_| \_\_____/_/   \_\____/|_|  |_|_____|
#====================================================

repo_tree:
  enabled: true
  max_depth: 3
  ignore:
    - ".git"
    - ".github"
    - "_template"
    - "_render"
    - "__pycache__"
    - ".venv"
    - "venv"
    - "node_modules"
    - ".vscode"
    - ".idea"
    - "*.pyc"
    - "logs"
    - "screens"

readme_topic:
  - title: "Getting Started with cURL"
    content: > 
      cURL is a command-line tool for making HTTP requests. It supports various protocols and is 
      widely used for testing APIs. cURL commands typically include the URL, method, headers, and data.
      You can install cURL on most systems via package managers like `apt`, `brew`, or `choco`. To check 
      if cURL is installed, run `curl --version` in your terminal.

    code_block:
      language: "bash"
      code: |
        curl --version

  - title: "cURL Basics"
    content: > 
      The basic syntax for a cURL command is:
      ```
      curl [options] <URL>
      ```
      Common options include:
      - `-X <METHOD>`: Specify the HTTP method (GET, POST, etc.).
      - `-H "<HEADER>"`: Add a header to the request.
      - `-d "<DATA>"`: Include data in the request body (for POST/PUT).
      - `-o <FILE>`: Save the response to a file.
      - `-v`: Enable verbose output to see request/response details.

      You can combine these options to customize your requests. For example, to make a GET request with a custom header:
      `curl -H "Authorization: Bearer <token>" https://api.example.com/data`. This command includes an authorization header 
      with a bearer token which we can use to authentcate to our API. We can also request JSON data by adding an `Accept` header
      to our request as shown below:

    code_block:
      language: "bash"
      code: |
        curl -H "Authorization: Bearer <token>" -H "Accept: application/json" https://api.example.com/data
    
  - title: "Understanding HTTP Methods"
    content: >
      HTTP methods define the action to be performed on a resource. The most common methods are:
      - `GET`: Retrieve data from a server.
      - `POST`: Send data to a server to create a resource.
      - `PUT`: Update an existing resource on the server.
      - `DELETE`: Remove a resource from the server.

      Each method has specific semantics and is used in different scenarios. For example, use `GET` for fetching data, 
      and `POST` for submitting forms or uploading files. This is known as a CRUD operation (Create, Read, Update, Delete).
      While not every api supports all methods, most will support at least GET and POST.

  - title: "Disecting HTTP Response Codes"
    content: >
      HTTP response codes indicate the result of an HTTP request. They are grouped into five categories:
      - `1xx`: Informational responses (e.g., 100 Continue)
      - `2xx`: Successful responses (e.g., 200 OK, 201 Created)
      - `3xx`: Redirection messages (e.g., 301 Moved Permanently, 302 Found)
      - `4xx`: Client error responses (e.g., 400 Bad Request, 401 Unauthorized, 404 Not Found)
      - `5xx`: Server error responses (e.g., 500 Internal Server Error, 503 Service Unavailable)

      Understanding these codes helps diagnose issues with API requests. For example, a `401 Unauthorized` indicates 
      that authentication is required or has failed, while a `404 Not Found` means the requested resource does not exist. A 200
      status code indicates that the request was successful and the server returned the requested data.

  - title: "JSON Responses"
    content: >
      JSON (JavaScript Object Notation) is a lightweight data interchange format that is easy for humans to read and write, 
      and easy for machines to parse and generate. Many APIs use JSON to format their responses because it is language-independent 
      and widely supported.

      You can use tools like `jq` to parse and pretty-print JSON responses in the terminal. For example, to extract the `name` field 
      from a JSON response, you can use the example command below:
      
    code_block:
      language: "bash"
      code: |
        curl -H "Accept: application/json" https://api.example.com/data | jq '.name'
    
    code_notes: >
      In this command, we pipe the output of the cURL request to `jq`, which extracts and displays the value of the `name` field.

  - title: "Postman Overview"
    content: >
      Postman is a popular API client that provides a user-friendly interface for building, testing, and documenting APIs. It allows you 
      to create and save requests, organize them into collections, and share them with others. Postman supports various authentication methods, including API keys, OAuth, and bearer tokens.
      You can also use Postman to generate code snippets in multiple programming languages, making it easier to integrate API calls into your applications.
      Postman is available as a desktop application and a web app. You can download it from the [Postman website](https://www.postman.com/) or use it directly in your browser.

  - title: "Postman Features"
    content: >
      Key features of Postman include:
      - **Collections**: Organize requests into collections for better management.
      - **Environments**: Use environments to store variables like API keys and URLs for different setups (development, staging, production).
      - **Pre-request Scripts**: Write JavaScript code to execute before a request is sent, useful for setting dynamic variables.
      - **Tests**: Write tests to validate responses and automate testing workflows.
      - **Mock Servers**: Create mock servers to simulate API responses for testing purposes.

      Postman also provides collaboration features, allowing teams to work together on API development and testing.

  - title: "Working with Publi APIs"
    content: >
      Public APIs are APIs that are available for use by anyone. They often require an API key or token for authentication, but some may be open and free to use without any credentials.
      When working with public APIs, it is important to read the documentation to understand the available endpoints, request parameters, and response formats.
      Many public APIs have rate limits to prevent abuse, so be mindful of how many requests you make in a given time period.

      Examples of popular public APIs include the [Dad Jokes API](https://icanhazdadjoke.com/api) for fetching random dad jokes and the [Deck of Cards API](https://deckofcardsapi.com/) for simulating a deck of playing cards.

      The Dad Jokes API requires the `Accept: application/json` header to return JSON responses, while the Deck of Cards API allows you 
      to create a new deck and draw cards using the same `deck_id`. Use the `deck_id` from the create response to draw cards in subsequent requests.

  - title: "Authentication Methods"
    content: >
      Authentication is the process of verifying the identity of a user or application before granting access to an API. Common authentication methods include:
      - **API Keys**: A simple token that is included in the request header or URL to identify the client.
      - **Bearer Tokens**: A type of token that is included in the `Authorization` header as `Bearer <token>`. It is often used with OAuth 2.0.
      - **OAuth**: A more complex authentication framework that allows users to grant third-party applications access to their resources without sharing credentials.

      When making authenticated requests, ensure that you include the necessary headers and tokens as specified in the API documentation. If authentication fails, you may receive a `401 Unauthorized` response.
      For this module our APIs do not require any authentication, but moving on to Cisco DevNet APIs and other enterprise APIs you will need to authenticate.

#=========================================================================
#
#   ___ _   _ ____ _____ ____  _   _  ____ _____ ___ ___  _   _ ____
#  |_ _| \ | / ___|_   _|  _ \| | | |/ ___|_   _|_ _/ _ \| \ | / ___|
#   | ||  \| \___ \ | | | |_) | | | | |     | |  | | | | |  \| \___ \
#   | || |\  |___) || | |  _ <| |_| | |___  | |  | | |_| | |\  |___) |
#  |___|_| \_|____/ |_| |_| \_\\___/ \____| |_| |___\___/|_| \_|____/
#
#=========================================================================
# LAB 3 — INTRODUCTION TO APIs (Bash + cURL + jq + Postman)
# Software Defined Networking • Florida State College at Jacksonville
# Worth 75 points

# OBJECTIVES
objectives:
  - "Use Bash to automate API calls with cURL and capture HTTP status codes."
  - "Parse JSON responses with jq and extract specific fields."
  - "Apply Linux scripting fundamentals (shebang, set -euo pipefail, functions, variables, traps)."
  - "Use Postman to explore requests and export runnable cURL and Python code."
  - "Document API interactions via files (GitHub) and screenshots (Canvas)."

# PREREQUISITES
python_version: "3.11"
accounts: ["GitHub", "Canvas"]
devices: ["Public APIs (Dad Jokes, Deck of Cards)"]

prereq:
  - "Linux/Bash basics: variables, functions, redirection, executable scripts."
  - "cURL installed and usable from terminal."
  - "jq installed for JSON parsing."
  - "Postman (desktop or web) signed in."
  - "Git and GitHub Classroom workflow (clone, commit, push, PR)."

# OVERVIEW
overview: >
  This lab builds core API muscle memory without Python: you'll write a Bash script that calls the Dad Jokes
  and Deck of Cards APIs using cURL, capture HTTP status codes, and parse JSON with jq into tidy text
  summaries. You'll also explore the same requests in Postman, then export their cURL and Python code
  snippets to include in your repository. GitHub collects your scripts, logs, and parsed artifacts; Canvas
  collects Postman screenshots and a short reflection.

# SETUP
before_you_begin: >
  Verify tools: `bash --version`, `curl --version`, `jq --version`.
  If any are missing, install them before proceeding. Ensure you can write to `data/` and `logs/`.

# RESOURCES
resources:
  - { title: "Dad Jokes API", url: "https://icanhazdadjoke.com/api" }
  - { title: "Deck of Cards API", url: "https://deckofcardsapi.com/" }
  - { title: "cURL Manual", url: "https://curl.se/docs/manual.html" }
  - { title: "jq Manual", url: "https://jqlang.github.io/jq/manual/" }
  - { title: "HTTP Status Codes (MDN)", url: "https://developer.mozilla.org/en-US/docs/Web/HTTP/Status" }
  - { title: "Postman Downloads", url: "https://www.postman.com/downloads/" }

# DELIVERABLES
deliverables:
  - "GitHub: `scripts/api_lab.sh` (executable Bash script using curl + jq, with logging)."
  - "GitHub: Raw JSON saved under `data/` (see steps for filenames)."
  - "GitHub: Parsed summaries saved under `data/` (txt files)."
  - "GitHub: Postman exports saved as `data/postman_curl.txt` and `data/postman_python.py`."
  - "GitHub: `logs/lab3.log` containing required markers."
  - "Canvas: 3 Postman screenshots (Headers/Status/Body; Code Generator pane; Deck workflow)."
  - "Canvas: 2-3 sentence reflection (HTTP verbs and status codes)."

# STEPS
steps:
  - title: "Clone the Repository"
    goal: "Get your starter locally."
    actions: |
      Clone your GitHub Classroom repo and `cd` into it. Create `scripts/`, `data/`, and `logs/` if missing.
      Initialize the log with `echo 'LAB3_START' >> logs/lab3.log`.
    done_when: |
      - Repo present; folders exist (`scripts/`, `data/`, `logs/`).
      - `LAB3_START` appears in `logs/lab3.log`.
    log_marker: "LAB3_START"

  - title: "Author Bash Script (Linux fundamentals)"
    goal: "Create a robust script with functions, status capture, and traps."
    actions: |
      Create `scripts/api_lab.sh` with:
        - Shebang: `#!/usr/bin/env bash`
        - `set -euo pipefail` and `IFS=$'\n\t'`
        - A `log()` function that appends to `logs/lab3.log`
        - A `cleanup()` trap for EXIT to close out gracefully
        - Variables for API URLs and output paths
        - Use `curl -sS -H 'Accept: application/json' -w '%{http_code}' -o <file>` to capture body & status
      Make it executable: `chmod +x scripts/api_lab.sh`
      Log `BASH_OK` when the script validates prerequisites and starts.
    done_when: |
      - Script is executable and runs basic prechecks.
      - Log contains `BASH_OK`.
    log_marker: "BASH_OK"

  - title: "Dad Jokes via cURL + jq"
    goal: "Fetch JSON and parse fields."
    actions: |
      In the script:
        1) Use cURL to GET `https://icanhazdadjoke.com/` with `Accept: application/json`
           - Save body to `data/dad_joke.json`
           - Save HTTP status to a variable; if not 200, log `CURL_JOKE_FAIL` and exit non-zero.
        2) Use `jq -r '.id, .joke' data/dad_joke.json` to extract fields and save to `data/dad_joke.txt`
      Log `CURL_JOKE_OK` and `JQ_JOKE_OK` on success.
    done_when: |
      - `data/dad_joke.json` and `data/dad_joke.txt` exist and are non-empty.
      - Log contains `CURL_JOKE_OK` and `JQ_JOKE_OK`.
    log_marker: "CURL_JOKE_OK, JQ_JOKE_OK"

  - title: "Deck of Cards (create + draw) via cURL + jq"
    goal: "Perform a multi-step API flow and summarize results."
    actions: |
      In the script:
        1) Create a deck:
           - `curl https://deckofcardsapi.com/api/deck/new/shuffle/?deck_count=1`
             Save to `data/deck_create.json`; capture status; ensure 200 → log `DECK_CREATE_OK`.
           - Extract `deck_id` with `jq -r '.deck_id'`.
        2) Draw 2 cards:
           - `curl https://deckofcardsapi.com/api/deck/$deck_id/draw/?count=2`
             Save to `data/deck_draw.json`; capture status; ensure 200 → log `DECK_DRAW_OK`.
           - Extract values/suits with `jq -r '.cards[] | "\(.value) of \(.suit)"'`
             Save summary to `data/deck_summary.txt` (include `remaining` too).
      Log `JQ_DECK_OK` after all jq parsing completes.
    done_when: |
      - `data/deck_create.json`, `data/deck_draw.json`, and `data/deck_summary.txt` exist.
      - Log contains `DECK_CREATE_OK`, `DECK_DRAW_OK`, and `JQ_DECK_OK`.
    log_marker: "DECK_CREATE_OK, DECK_DRAW_OK, JQ_DECK_OK"

  - title: "Postman Exploration + Code Export"
    goal: "Demonstrate tool fluency beyond the CLI."
    actions: |
      In Postman:
        - Send Dad Jokes GET with `Accept: application/json`. Inspect Headers, Status, and JSON Body.
        - Open the Code Generator and export both cURL and Python code snippets for the same request.
        - Save those snippets to the repo as:
            `data/postman_curl.txt`
            `data/postman_python.py`
      Log `POSTMAN_EXPORT_CURL_OK` and `POSTMAN_EXPORT_PY_OK` once files are saved.
    done_when: |
      - Both files exist with meaningful content.
      - Log contains `POSTMAN_EXPORT_CURL_OK` and `POSTMAN_EXPORT_PY_OK`.
    log_marker: "POSTMAN_EXPORT_CURL_OK, POSTMAN_EXPORT_PY_OK"

  - title: "Canvas Screenshots + Reflection"
    goal: "Show understanding of HTTP anatomy and Postman."
    actions: |
      Upload to Canvas:
        - Screenshot 1: Postman Dad Jokes request showing Headers, Status Code, and JSON Body.
        - Screenshot 2: Postman Code Generator window (showing cURL or Python export).
        - Screenshot 3: Deck of Cards create/draw workflow (URLs and JSON responses visible).
        - Reflection (2-3 sentences): explain GET vs POST and compare status 200 vs 404.
      Log `CANVAS_SUBMITTED` locally after you submit to Canvas.
    done_when: |
      - All three screenshots and the reflection are submitted to Canvas.
      - Log contains `CANVAS_SUBMITTED`.
    log_marker: "CANVAS_SUBMITTED"

  - title: "Wrap-up and Submit PR"
    goal: "Finalize logs and artifacts."
    actions: |
      Ensure your script logs `LAB3_END` at completion (via `trap` or final step).
      Commit and push all changes. Open a pull request targeting `main`.
    done_when: |
      - PR open; repo contains scripts, data, and logs.
      - `LAB3_END` present in `logs/lab3.log`.
    log_marker: "LAB3_END"

# FAQ + TROUBLESHOOTING
faq:
  - q: "I got HTML instead of JSON from Dad Jokes."
    a: "Include the header `Accept: application/json` in your curl command."
  - q: "jq says 'command not found'."
    a: "Install jq (e.g., `sudo apt-get install -y jq`) or use your package manager."
  - q: "Deck draw fails with 'invalid deck_id'."
    a: "Parse `deck_id` from the create response and reuse it literally in the draw URL."

tips:
  - title: "Capture HTTP status codes"
    symptom: "You can't tell if the request succeeded."
    fix: "Use `-w '%{http_code}'` and `-o` to separate body and status, then check if status == 200."
  - title: "Stable scripts"
    symptom: "Silent failures."
    fix: "Use `set -euo pipefail`, check variables, and exit non-zero on API errors; log markers."
  - title: "File output redirection"
    symptom: "Nothing saved under data/."
    fix: "Create directories first; use `>`, `>>`, or `tee` appropriately."

# GRADING
grading:
  total_points: 75
  rows:
    - { step: "Step 2", requirement: "Bash fundamentals implemented (shebang, set -euo pipefail, functions, trap)", points: 10 }
    - { step: "Step 3", requirement: "Dad Jokes fetched; JSON + parsed text saved; markers `CURL_JOKE_OK`, `JQ_JOKE_OK`", points: 10 }
    - { step: "Step 4", requirement: "Deck created + drawn; parsed summary saved; markers `DECK_CREATE_OK`, `DECK_DRAW_OK`, `JQ_DECK_OK`", points: 15 }
    - { step: "Step 5", requirement: "Postman exports saved to repo; markers `POSTMAN_EXPORT_CURL_OK`, `POSTMAN_EXPORT_PY_OK`", points: 10 }
    - { step: "Step 6", requirement: "Canvas screenshots (3) + reflection submitted; marker `CANVAS_SUBMITTED`", points: 15 }
    - { step: "All steps", requirement: "Log hygiene: start/end + required markers; consistent file outputs", points: 10 }
    - { step: "Setup", requirement: "Tools verified; script runnable; marker `BASH_OK` present", points: 5 }

# AUTOGRADING
autograder:
  log_path: "logs/lab3.log"
  required_markers:
    - "LAB3_START"
    - "BASH_OK"
    - "CURL_JOKE_OK"
    - "JQ_JOKE_OK"
    - "DECK_CREATE_OK"
    - "DECK_DRAW_OK"
    - "JQ_DECK_OK"
    - "POSTMAN_EXPORT_CURL_OK"
    - "POSTMAN_EXPORT_PY_OK"
    - "CANVAS_SUBMITTED"
    - "LAB3_END"

# SUBMISSION CHECKLIST
submission_checklist:
  - "GitHub: `scripts/api_lab.sh` is executable and runs without errors."
  - "GitHub: `data/dad_joke.json` and `data/dad_joke.txt` exist."
  - "GitHub: `data/deck_create.json`, `data/deck_draw.json`, and `data/deck_summary.txt` exist."
  - "GitHub: `data/postman_curl.txt` and `data/postman_python.py` exist."
  - "GitHub: `logs/lab3.log` contains all required markers."
  - "Canvas: 3 Postman screenshots + reflection submitted."
  - "PR is open to `main` before deadline."

license: "© 2025 Sheldon Swanson — Classroom use."